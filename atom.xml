<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老实人保护协会</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://laoshirenclub.com/"/>
  <updated>2019-10-21T09:50:54.902Z</updated>
  <id>http://laoshirenclub.com/</id>
  
  <author>
    <name>王老实</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql架构</title>
    <link href="http://laoshirenclub.com/2019/10/11/mysql%E6%9E%B6%E6%9E%84/"/>
    <id>http://laoshirenclub.com/2019/10/11/mysql架构/</id>
    <published>2019-10-11T11:02:00.000Z</published>
    <updated>2019-10-21T09:50:54.902Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hashmap 为什么设置桶个数大于8转为红黑树</title>
    <link href="http://laoshirenclub.com/2019/09/28/hashmap-treeify-threhold/"/>
    <id>http://laoshirenclub.com/2019/09/28/hashmap-treeify-threhold/</id>
    <published>2019-09-28T09:28:33.000Z</published>
    <updated>2019-10-21T09:50:54.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hashmap-为什么设置桶个数大于8转为红黑树"><a href="#hashmap-为什么设置桶个数大于8转为红黑树" class="headerlink" title="hashmap 为什么设置桶个数大于8转为红黑树"></a>hashmap 为什么设置桶个数大于8转为红黑树</h2><p>时间和空间的平衡</p><h3 id="为什么要转换"><a href="#为什么要转换" class="headerlink" title="为什么要转换"></a>为什么要转换</h3><p>要弄明白这个问题，我们首先要明白为什么要转换，这个问题比较简单，因为Map中桶的元素初始化是链表保存的，其查找性能是O(n)，而树结构能将查找性能提升到O(log(n))。当链表长度很小的时候，即使遍历，速度也非常快，但是当链表长度不断变长，肯定会对查询性能有一定的影响，所以才需要转成树。<br>源码中有一段话:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">* Because TreeNodes are about twice the size of regular nodes, we</span><br><span class="line">* use them only when bins contain enough nodes to warrant use</span><br><span class="line">* (see TREEIFY_THRESHOLD). <span class="function">And when they become too <span class="title">small</span> <span class="params">(due to</span></span></span><br><span class="line"><span class="function"><span class="params">* removal or resizing)</span> they are converted back to plain bins.  In</span></span><br><span class="line"><span class="function">* usages with well-distributed user hashCodes, tree bins are</span></span><br><span class="line"><span class="function">* rarely used.  Ideally, under random hashCodes, the frequency of</span></span><br><span class="line"><span class="function">* nodes in bins follows a Poisson distribution</span></span><br><span class="line"><span class="function">* <span class="params">(http://en.wikipedia.org/wiki/Poisson_distribution)</span> with a</span></span><br><span class="line"><span class="function">* parameter of about 0.5 on average <span class="keyword">for</span> the <span class="keyword">default</span> resizing</span></span><br><span class="line"><span class="function">* threshold of 0.75, although with a large variance because of</span></span><br><span class="line"><span class="function">* resizing granularity. Ignoring variance, the expected</span></span><br><span class="line"><span class="function">* occurrences of list size k <span class="title">are</span> <span class="params">(exp(<span class="number">-0.5</span>)</span> * <span class="title">pow</span><span class="params">(<span class="number">0.5</span>, k)</span> /</span></span><br><span class="line"><span class="function">* <span class="title">factorial</span><span class="params">(k)</span>). The first values are:</span></span><br><span class="line"><span class="function">*</span></span><br><span class="line"><span class="function">* 0:    0.60653066</span></span><br><span class="line"><span class="function">* 1:    0.30326533</span></span><br><span class="line"><span class="function">* 2:    0.07581633</span></span><br><span class="line"><span class="function">* 3:    0.01263606</span></span><br><span class="line"><span class="function">* 4:    0.00157952</span></span><br><span class="line"><span class="function">* 5:    0.00015795</span></span><br><span class="line"><span class="function">* 6:    0.00001316</span></span><br><span class="line"><span class="function">* 7:    0.00000094</span></span><br><span class="line"><span class="function">* 8:    0.00000006</span></span><br><span class="line"><span class="function">* more: less than 1 in ten million</span></span><br></pre></td></tr></table></figure><p>因为bin的大小几乎不能为8个,如果为8个说明hash取的不好,分配的过于不均匀</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hashmap-为什么设置桶个数大于8转为红黑树&quot;&gt;&lt;a href=&quot;#hashmap-为什么设置桶个数大于8转为红黑树&quot; class=&quot;headerlink&quot; title=&quot;hashmap 为什么设置桶个数大于8转为红黑树&quot;&gt;&lt;/a&gt;hashmap 为什么设置桶
      
    
    </summary>
    
    
      <category term="data structure" scheme="http://laoshirenclub.com/categories/data-structure/"/>
    
      <category term="hashmap" scheme="http://laoshirenclub.com/categories/data-structure/hashmap/"/>
    
    
      <category term="hashmap" scheme="http://laoshirenclub.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>hashmap 如何把大小设置为2的幂次方</title>
    <link href="http://laoshirenclub.com/2019/09/28/hashmap_tableSizeFor/"/>
    <id>http://laoshirenclub.com/2019/09/28/hashmap_tableSizeFor/</id>
    <published>2019-09-28T09:26:01.000Z</published>
    <updated>2019-10-21T09:50:55.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hashmap-如何把大小设置为2的幂次方"><a href="#hashmap-如何把大小设置为2的幂次方" class="headerlink" title="hashmap 如何把大小设置为2的幂次方"></a>hashmap 如何把大小设置为2的幂次方</h2><p>我们看hashmap源码发现有一个方法,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static final int tableSizeFor(int cap) &#123;</span><br><span class="line">    int n = cap - 1;</span><br><span class="line">    n |= n &gt;&gt;&gt; 1;</span><br><span class="line">    n |= n &gt;&gt;&gt; 2;</span><br><span class="line">    n |= n &gt;&gt;&gt; 4;</span><br><span class="line">    n |= n &gt;&gt;&gt; 8;</span><br><span class="line">    n |= n &gt;&gt;&gt; 16;</span><br><span class="line">    return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于把bucket的大小设置为2的幂次方。<br>先来分析有关n位操作部分：先来假设n的二进制为01xxx…xxx。接着</p><p>对n右移1位：001xx…xxx，再位或：011xx…xxx</p><p>对n右移2为：00011…xxx，再位或：01111…xxx</p><p>此时前面已经有四个1了，再右移4位且位或可得8个1</p><p>同理，有8个1，右移8位肯定会让后八位也为1。</p><p>综上可得，该算法让最高位的1后面的位全变为1。</p><p>最后再让结果n+1，即得到了2的整数次幂的值了。</p><p>因为int最大为32位,那么位移31位就可以了。这样从第一位开始所有位数都是1.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hashmap-如何把大小设置为2的幂次方&quot;&gt;&lt;a href=&quot;#hashmap-如何把大小设置为2的幂次方&quot; class=&quot;headerlink&quot; title=&quot;hashmap 如何把大小设置为2的幂次方&quot;&gt;&lt;/a&gt;hashmap 如何把大小设置为2的幂次方&lt;/
      
    
    </summary>
    
    
      <category term="data structure" scheme="http://laoshirenclub.com/categories/data-structure/"/>
    
      <category term="hashmap" scheme="http://laoshirenclub.com/categories/data-structure/hashmap/"/>
    
    
      <category term="algorithm" scheme="http://laoshirenclub.com/tags/algorithm/"/>
    
      <category term="hashmap" scheme="http://laoshirenclub.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>hashmap hash方法</title>
    <link href="http://laoshirenclub.com/2019/09/28/hashmap_hash/"/>
    <id>http://laoshirenclub.com/2019/09/28/hashmap_hash/</id>
    <published>2019-09-28T06:06:01.000Z</published>
    <updated>2019-10-21T09:50:54.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hashmap-hash方法"><a href="#hashmap-hash方法" class="headerlink" title="hashmap hash方法"></a>hashmap hash方法</h2><p>我们可以看到,hashmap的hash方法是:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图中可以看出,hashmap是允许key 为null的。</p><p>我们知道,平时hashcode()都是32位,我们看到最后的hash值是hash值的低位与高位做了异或运算。为什么要做额外的处理呢,我们查看下定位值的方法,发现只有hash值的低四位参加了运算,设计者考虑到现在的hashCode分布的已经很不错了，而且当发生较大碰撞时也用树形存储降低了冲突。仅仅异或一下，既减少了系统的开销，也不会造成的因为高位没有参与下标的计算(table长度比较小时)，从而引起的碰撞。</p><p>附录：</p><ul><li><a href="https://laoshirenclub.com/2019/09/28/bitoperation/">位运算</a></li><li><a href="https://laoshirenclub.com/categories/java/hashmap/">hashmap源码分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hashmap-hash方法&quot;&gt;&lt;a href=&quot;#hashmap-hash方法&quot; class=&quot;headerlink&quot; title=&quot;hashmap hash方法&quot;&gt;&lt;/a&gt;hashmap hash方法&lt;/h2&gt;&lt;p&gt;我们可以看到,hashmap的hash方法是
      
    
    </summary>
    
    
      <category term="data structure" scheme="http://laoshirenclub.com/categories/data-structure/"/>
    
      <category term="hashmap" scheme="http://laoshirenclub.com/categories/data-structure/hashmap/"/>
    
    
      <category term="java" scheme="http://laoshirenclub.com/tags/java/"/>
    
      <category term="hashmap" scheme="http://laoshirenclub.com/tags/hashmap/"/>
    
      <category term="data structure" scheme="http://laoshirenclub.com/tags/data-structure/"/>
    
  </entry>
  
  <entry>
    <title>位运算</title>
    <link href="http://laoshirenclub.com/2019/09/28/bitoperation/"/>
    <id>http://laoshirenclub.com/2019/09/28/bitoperation/</id>
    <published>2019-09-28T02:06:01.000Z</published>
    <updated>2019-10-21T09:50:54.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java位运算"><a href="#java位运算" class="headerlink" title="java位运算"></a>java位运算</h2><h3 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h3><p><code>^</code> ,二进制运算,相同为0,不同为1</p><p>hashmap计算hash时,有一个异或运算,为了方便把hash变的均匀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="与运算"><a href="#与运算" class="headerlink" title="与运算"></a>与运算</h3><p><code>&amp;</code>,二进制计算,只要有一个为0,就为0<br>常做取余算法。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println((<span class="number">129</span>/<span class="number">128</span>) ==(<span class="number">129</span> &amp; <span class="number">127</span>));</span><br></pre></td></tr></table></figure><h3 id="或方法"><a href="#或方法" class="headerlink" title="或方法"></a>或方法</h3><p><code>|</code> 二进制计算,两个数只要有一个为1则为1，否则就为0</p><h3 id="非方法"><a href="#非方法" class="headerlink" title="非方法"></a>非方法</h3><p><code>~</code></p><h3 id="lt-lt-向左位移"><a href="#lt-lt-向左位移" class="headerlink" title="&lt;&lt; 向左位移"></a>&lt;&lt; 向左位移</h3><p>针对二进制，转换成二进制后向左移动n位，后面用0补齐</p><h3 id="gt-gt-向右位移"><a href="#gt-gt-向右位移" class="headerlink" title="&gt;&gt;(向右位移)"></a>&gt;&gt;(向右位移)</h3><p>针对二进制，转换成二进制后向右移动n位，</p><h3 id="gt-gt-gt-无符号右移"><a href="#gt-gt-gt-无符号右移" class="headerlink" title="&gt;&gt;&gt;(无符号右移)"></a>&gt;&gt;&gt;(无符号右移)</h3><p>无符号右移，忽略符号位，空位都以0补齐<br>hash值右移获取高位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;java位运算&quot;&gt;&lt;a href=&quot;#java位运算&quot; class=&quot;headerlink&quot; title=&quot;java位运算&quot;&gt;&lt;/a&gt;java位运算&lt;/h2&gt;&lt;h3 id=&quot;异或运算&quot;&gt;&lt;a href=&quot;#异或运算&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="java" scheme="http://laoshirenclub.com/categories/java/"/>
    
    
      <category term="java" scheme="http://laoshirenclub.com/tags/java/"/>
    
      <category term="algorithm" scheme="http://laoshirenclub.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>每日一道leetcode 两数之和d</title>
    <link href="http://laoshirenclub.com/2019/09/27/leetcode_towsum/"/>
    <id>http://laoshirenclub.com/2019/09/27/leetcode_towsum/</id>
    <published>2019-09-27T11:06:01.000Z</published>
    <updated>2019-10-21T09:50:55.021Z</updated>
    
    <content type="html"><![CDATA[<h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><blockquote><p>题目见<a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">两数之和</a></p></blockquote><p>最暴力的方法是两次for循环遍历,时间复杂度是O(n^2)<br>优化点在于怎么快速查询出来值。<br>采用hashMap的方式,key是hash存储,能够快速搜索到key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TowSum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(j)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(j), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附录:</p><ul><li><a href="https://laoshirenclub.com/categories/java/hashmap/">hashmap源码分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;两数之和&quot;&gt;&lt;a href=&quot;#两数之和&quot; class=&quot;headerlink&quot; title=&quot;两数之和&quot;&gt;&lt;/a&gt;两数之和&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;题目见&lt;a href=&quot;https://leetcode-cn.com/problems/two-
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://laoshirenclub.com/categories/algorithm/"/>
    
      <category term="leetcode" scheme="http://laoshirenclub.com/categories/algorithm/leetcode/"/>
    
    
      <category term="algorithm" scheme="http://laoshirenclub.com/tags/algorithm/"/>
    
      <category term="hashmap" scheme="http://laoshirenclub.com/tags/hashmap/"/>
    
  </entry>
  
  <entry>
    <title>redis bug</title>
    <link href="http://laoshirenclub.com/2019/07/04/redisbug/"/>
    <id>http://laoshirenclub.com/2019/07/04/redisbug/</id>
    <published>2019-07-04T02:46:01.000Z</published>
    <updated>2019-10-21T09:50:54.919Z</updated>
    
    <content type="html"><![CDATA[<p>使用springboot redis,配置没有问题,但是一直报错netty.UnResolveAddressException。经过排查发现,springboot redis 需要引用netty 4.1.x 的包,项目中有4.0.x的netty依赖。排除掉依赖恢复正常。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用springboot redis,配置没有问题,但是一直报错netty.UnResolveAddressException。经过排查发现,springboot redis 需要引用netty 4.1.x 的包,项目中有4.0.x的netty依赖。排除掉依赖恢复正常。&lt;/
      
    
    </summary>
    
    
      <category term="bug" scheme="http://laoshirenclub.com/categories/bug/"/>
    
    
      <category term="bug" scheme="http://laoshirenclub.com/tags/bug/"/>
    
      <category term="redis" scheme="http://laoshirenclub.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>springcloud 客户端</title>
    <link href="http://laoshirenclub.com/2019/07/01/eurekaclient/"/>
    <id>http://laoshirenclub.com/2019/07/01/eurekaclient/</id>
    <published>2019-07-01T02:06:01.000Z</published>
    <updated>2019-10-21T09:50:54.971Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们看下Netflix官方给的图<br><img src="https://raw.githubusercontent.com/wangzhilun/wangzhilun.github.io/master/image/netflix.jpg" alt="图"></p><h2 id="eureka-client"><a href="#eureka-client" class="headerlink" title="eureka client"></a>eureka client</h2><p>引入eureka client 会自动配置<code>EurekaClientAutoConfiguration</code>。我们看下里面配置了什么内容。</p><p><code>EurekaClientAutoConfiguration</code> 主要是生成了一个<code>DiscoveryClient</code>类。<br><code>DiscoveryClient.initScheduledTasks()</code>初始化的过程中,会启动一些定时任务,来触发客户端操作</p><h3 id="服务注册-续约"><a href="#服务注册-续约" class="headerlink" title="服务注册 续约"></a>服务注册 续约</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initScheduledTasks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 如果允许获取注册信息,那么拉取注册信息到本地</span></span><br><span class="line">        <span class="keyword">if</span> (clientConfig.shouldFetchRegistry()) &#123;</span><br><span class="line">            <span class="comment">// registry cache refresh timer</span></span><br><span class="line">            <span class="keyword">int</span> registryFetchIntervalSeconds = clientConfig.getRegistryFetchIntervalSeconds();</span><br><span class="line">            <span class="keyword">int</span> expBackOffBound = clientConfig.getCacheRefreshExecutorExponentialBackOffBound();</span><br><span class="line">            scheduler.schedule(</span><br><span class="line">                    <span class="keyword">new</span> TimedSupervisorTask(</span><br><span class="line">                            <span class="string">"cacheRefresh"</span>,</span><br><span class="line">                            scheduler,</span><br><span class="line">                            cacheRefreshExecutor,</span><br><span class="line">                            registryFetchIntervalSeconds,</span><br><span class="line">                            TimeUnit.SECONDS,</span><br><span class="line">                            expBackOffBound,</span><br><span class="line">                            <span class="keyword">new</span> CacheRefreshThread()</span><br><span class="line">                    ),</span><br><span class="line">                    registryFetchIntervalSeconds, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//如果允许注册到eureka，</span></span><br><span class="line">        <span class="keyword">if</span> (clientConfig.shouldRegisterWithEureka()) &#123;</span><br><span class="line">            <span class="keyword">int</span> renewalIntervalInSecs = instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();</span><br><span class="line">            <span class="keyword">int</span> expBackOffBound = clientConfig.getHeartbeatExecutorExponentialBackOffBound();</span><br><span class="line">            logger.info(<span class="string">"Starting heartbeat executor: "</span> + <span class="string">"renew interval is: "</span> + renewalIntervalInSecs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时续约</span></span><br><span class="line">            <span class="comment">// Heartbeat timer</span></span><br><span class="line">            scheduler.schedule(</span><br><span class="line">                    <span class="keyword">new</span> TimedSupervisorTask(</span><br><span class="line">                            <span class="string">"heartbeat"</span>,</span><br><span class="line">                            scheduler,</span><br><span class="line">                            heartbeatExecutor,</span><br><span class="line">                            renewalIntervalInSecs,</span><br><span class="line">                            TimeUnit.SECONDS,</span><br><span class="line">                            expBackOffBound,</span><br><span class="line">                            <span class="keyword">new</span> HeartbeatThread()</span><br><span class="line">                    ),</span><br><span class="line">                    renewalIntervalInSecs, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// InstanceInfo replicator</span></span><br><span class="line">            instanceInfoReplicator = <span class="keyword">new</span> InstanceInfoReplicator(</span><br><span class="line">                    <span class="keyword">this</span>,</span><br><span class="line">                    instanceInfo,</span><br><span class="line">                    clientConfig.getInstanceInfoReplicationIntervalSeconds(),</span><br><span class="line">                    <span class="number">2</span>); <span class="comment">// burstSize</span></span><br><span class="line"></span><br><span class="line">            statusChangeListener = <span class="keyword">new</span> ApplicationInfoManager.StatusChangeListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"statusChangeListener"</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(StatusChangeEvent statusChangeEvent)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (InstanceStatus.DOWN == statusChangeEvent.getStatus() ||</span><br><span class="line">                            InstanceStatus.DOWN == statusChangeEvent.getPreviousStatus()) &#123;</span><br><span class="line">                        <span class="comment">// log at warn level if DOWN was involved</span></span><br><span class="line">                        logger.warn(<span class="string">"Saw local status change event &#123;&#125;"</span>, statusChangeEvent);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        logger.info(<span class="string">"Saw local status change event &#123;&#125;"</span>, statusChangeEvent);</span><br><span class="line">                    &#125;</span><br><span class="line">                    instanceInfoReplicator.onDemandUpdate();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (clientConfig.shouldOnDemandUpdateStatusChange()) &#123;</span><br><span class="line">                applicationInfoManager.registerStatusChangeListener(statusChangeListener);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">           </span><br><span class="line"><span class="comment">//注册         instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"Not registering with Eureka server per configuration"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="服务下线"><a href="#服务下线" class="headerlink" title="服务下线"></a>服务下线</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isShutdown.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            logger.info(<span class="string">"Shutting down DiscoveryClient ..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (statusChangeListener != <span class="keyword">null</span> &amp;&amp; applicationInfoManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">                applicationInfoManager.unregisterStatusChangeListener(statusChangeListener.getId());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cancelScheduledTasks();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If APPINFO was registered</span></span><br><span class="line">            <span class="keyword">if</span> (applicationInfoManager != <span class="keyword">null</span> &amp;&amp; clientConfig.shouldRegisterWithEureka()) &#123;</span><br><span class="line">                applicationInfoManager.setInstanceStatus(InstanceStatus.DOWN);</span><br><span class="line">                unregister();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (eurekaTransport != <span class="keyword">null</span>) &#123;</span><br><span class="line">                eurekaTransport.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            heartbeatStalenessMonitor.shutdown();</span><br><span class="line">            registryStalenessMonitor.shutdown();</span><br><span class="line"></span><br><span class="line">            logger.info(<span class="string">"Completed shut down of DiscoveryClient"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先我们看下Netflix官方给的图&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wangzhilun/wangzhilun.github.io/master/image/netflix.jpg&quot; alt=&quot;图&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="springcloud源码分析" scheme="http://laoshirenclub.com/categories/springcloud%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="springcloud" scheme="http://laoshirenclub.com/tags/springcloud/"/>
    
      <category term="eureka" scheme="http://laoshirenclub.com/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>springcloud 注册中心</title>
    <link href="http://laoshirenclub.com/2019/07/01/eurekaserver/"/>
    <id>http://laoshirenclub.com/2019/07/01/eurekaserver/</id>
    <published>2019-07-01T02:06:01.000Z</published>
    <updated>2019-10-21T09:50:55.046Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们看下Netflix官方给的图<br><img src="https://raw.githubusercontent.com/wangzhilun/wangzhilun.github.io/master/image/netflix.jpg" alt="图"></p><h2 id="注册中心eureka"><a href="#注册中心eureka" class="headerlink" title="注册中心eureka"></a>注册中心eureka</h2><p>开启eureka服务端很简单,只需要在添加注解<code>@EnableEurekaServer</code>即可。一般来说添加一个注解开启一个功能,主要是通过import导入一个configuration.我们可以看到<code>@EnableEurekaServer</code>注解其实是引入了<code>EurekaServerConfiguration</code>配置。我们看下里面配置了哪些内容。</p><p>首先我们看到,里面配置了<code>EurekaServerConfigBeanConfiguration</code>,这个类会配置一个一份<code>EurekaServiceConfig</code>,里面包含了所有配置的enruka server属性。<br>配置了一个eureka的看板,通过看板我们能看到有多少个服务接入了server.<br>配置了一些eureka nodes，用来做高可用集群使用。<br>配置了注册中心,我们主要来看下这个注册中心. </p><h2 id="注册中心-PeerAwareInstanceRegistryImpl"><a href="#注册中心-PeerAwareInstanceRegistryImpl" class="headerlink" title="注册中心 PeerAwareInstanceRegistryImpl"></a>注册中心 <code>PeerAwareInstanceRegistryImpl</code></h2><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p><code>register()</code></p><h3 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h3><p><code>cancle()</code></p><h3 id="续约"><a href="#续约" class="headerlink" title="续约"></a>续约</h3><p><code>renew()</code></p><h3 id="定时清理"><a href="#定时清理" class="headerlink" title="定时清理"></a>定时清理</h3><p><code>evic()</code></p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p><code>PeerEurekaNodes</code> 包含了集群其他节点的信息<br><code>replicateToPeers</code>.将应用状态更新到其他节点</p><h2 id="注册接口"><a href="#注册接口" class="headerlink" title="注册接口"></a>注册接口</h2><p><code>ApplicationResource</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先我们看下Netflix官方给的图&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/wangzhilun/wangzhilun.github.io/master/image/netflix.jpg&quot; alt=&quot;图&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="springcloud源码分析" scheme="http://laoshirenclub.com/categories/springcloud%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="springcloud" scheme="http://laoshirenclub.com/tags/springcloud/"/>
    
      <category term="eureka" scheme="http://laoshirenclub.com/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>hello</title>
    <link href="http://laoshirenclub.com/2019/06/24/hello/"/>
    <id>http://laoshirenclub.com/2019/06/24/hello/</id>
    <published>2019-06-24T02:03:43.000Z</published>
    <updated>2019-10-21T09:50:54.940Z</updated>
    
    <content type="html"><![CDATA[<p>扬帆起航</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;扬帆起航&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
